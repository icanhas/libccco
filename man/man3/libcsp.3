.Dd $Mdocdate$
.Dt LIBCSP 3
.Os
.Sh NAME
.Nm chanalt
.Nm chanclose
.Nm chancreate
.Nm chanfree
.Nm channbrecv
.Nm channbrecvp
.Nm channbsend
.Nm channbsendp
.Nm chanopen
.Nm chanrecv
.Nm chanrecvp
.Nm chansend
.Nm chansendp
.Nm proccreate
.Nm procexit
.Nm procfree
.Nm procgetname
.Nm procinit
.Nm prockill
.Nm procrand
.Nm procsetname
.Nm procsleep
.Nm procsrand
.Nd parallel programming procedures
.\"
.\"
.Sh SYNOPSIS
.Bd -literal
#include <csp.h>
.Pp
typedef struct Chan	Chan;
typedef struct Alt	Alt;
typedef struct Proc	Proc;
.Pp
Proc*	proccreate(void (*fn)(void*), void* arg, int stksz);
void	procfree(Proc* proc);
int	procinit(Proc* proc, void (*fn)(void*), void* arg, int stksz);
void	prockill(Proc* proc);
void	procsetname(const char*, ...);
char*	procgetname(void);
void	procsleep(long dur);
void	procexit(void);
void	procsrand(long seed);
long	procrand(void);
Chan*	chancreate(long nel, long elsz);
void	chanfree(Chan* chan);
int	chanopen(Chan* chan);
void	chanclose(Chan* chan);
void	chanalt(Alt*);
int	chanrecv(Chan*, void*);
void*	chanrecvp(Chan*);
int	channbrecv(Chan*, void*);
void*	channbrecvp(Chan*);
int	chansend(Chan*, void*);
int	chansendp(Chan*, void*);
int	channbsend(Chan*, void*);
int	channbsendp(Chan*, void*);
.Ed
.\"
.\"
.Sh DESCRIPTION
.Pp
Libcsp is a parallel programming library inspired by several programming
languages including Limbo, Occam, Alef, and Go, as well as the Plan 9
and Inferno operating systems.  Its programming interface similar to
that provided by Plan 9's libthread.
.\"
.\"
.Ss Processes
.Pp
Processes have a 1:1 correspondence with system threads.
A
.Em Proc
holds the state of a process.
A program's
main thread should not call any of the procedures prefixed with
.Em proc;
they only behave correctly if called by a process. 
Processes may, in turn, create new processes.
.Pp
.Em Proccreate
and
.Em procinit
create a new process that will run
.Em fn(arg).
The size of the process's stack is specified by
.Em stksz;
if
.Em stksz
is zero, the system's default stack size for threads will be used.
.Em Proccreate
returns a pointer to a newly allocated
.Em Proc,
so the pointer must be freed later by
.Em procfree.
On the other hand,
.Em Proc
structures that were initialized by a prior call to
.Em procinit
must be destroyed by
.Em prockill.
.Em Proccreate
returns a null pointer if it encounters an error.
.Em Procinit 
returns a non-zero value if it encounters an error.
.Pp
.Em Procexit
terminates the calling process; any
.Em Proc
structures associated with it will remain intact.
.Pp
.Em Procsleep
blocks the calling process for at least
.Em dur
seconds.
.Pp
.Em Procsetname
sets the calling process's current name, and
.Em procgetname
returns it.  The pointer returned by
.Em procgetname
is valid until the next call to
.Em procsetname.
.\" 
.\" 
.Ss Channels
.Pp
Channels are a means of combined communication and synchronization
between two or more processes (including the program's main thread in
this special case).
A
.Em Chan
holds the state of a channel.  
.Pp
.Em Chanopen
opens a channel of
.Em nel
elements
.Em elsz
bytes in size, and initialises the
.Em Chan
indicated by
.Em chan.
If
.Em nel
is zero, the channel will be unbuffered.
.Em Chanopen
returns a non-zero value if it encounters an error.
The channel must later be closed and the
.Em Chan
destroyed by
.Em chanclose.
.Pp
.Em Chancreate
allocates a new
.Em Chan
and opens a channel of
.Em nel
elements
.Em elsz
bytes in size.
If
.Em nel
is zero, the channel will be unbuffered.
.Em Chancreate
returns a null pointer if it encounters an error.
The returned pointer must later be freed (and the channel closed) by
.Em chanfree.
.\"
.\" 
.Ss Channel operations
.Pp
Once a channel is open, it can be used to transfer data.
Channel operations follow a naming scheme that indicates the differences
in their behaviour.
The naming scheme is
.Em chan[nb]send[p]
and
.Em chan[nb]recv[p],
where
.Em nb
indicates that the operation is non-blocking, and
.Em p
indicates that the operation transfers a pointer rather than a value.
Channel operations operate on one element in the channel per call.
.Pp
.Em Sends
on a buffered channel will proceed if there is space for an element in
the buffer, otherwise they will block until space becomes available. If
the channel is unbuffered, sends will block until a
.Em recv
 occurs in another process; likewise, 
.Em recvs
will block until a send occurs. 
.Em Sends
return -1 if they encounter an error, 1 otherwise. Non-blocking 
.Em sends
will return 0 if they would have blocked.
.Pp
.Em Recvs
on a buffered channel will block until at least one element becomes
available in the buffer.
.Em Recv 
operations return -1 if they encounter an error, 1 otherwise. Non-blocking 
.Em recvs
will return 0 if they would have blocked. Exceptions to this convention
are
.Em chanrecvp
and
.Em channbrecvp,
both of which return a null pointer if they encounter an error, as will
.Em channbrecvp
if it would have blocked.
.\"
.\" 
.Ss Random numbers
.Pp
Because interleaved or simultaneous calls to C's
.Em rand
and
.Em srand
procedures by multiple processes results in undefined behaviour, libcsp
provides a pseudo-random number generator (henceforward called a RNG).
.Pp
.Em Procsrand
seeds the RNG with
.Em seed.
.Em Procrand
returns a random integer between 0 and 2,147,483,647, provided the RNG
has been seeded (otherwise the return value is undefined).
.Pp
Each process has its own RNG, so calls to
.Em procrand
will yield a reproducible period regardless of whether other processes
have called
.Em procrand
or
.Em procsrand.
Likewise, calls to
.Em procsrand
will not interfere with other processes.
.Pp
The RNG's underlying mechanism is a Mersenne twister (MT19937) populated
by repeated applications of an equation taken from a Pok√©mon video game.
.Sh BUGS
.Pp
Alting is not yet implemented.
.Pp
Unbuffered channels only mimic unbuffered behaviour; they actually use a
one-element buffer. This keeps the implementation of unbuffered channel
operations as straightforward as possible.
